/*
 * Copyright (c) 2004-2022 The MZmine Development Team
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package io.github.mzmine.modules.tools.rawfilerename;

import io.github.mzmine.datamodel.MZmineProject;
import io.github.mzmine.datamodel.RawDataFile;
import io.github.mzmine.main.MZmineCore;
import io.github.mzmine.modules.MZmineModuleCategory;
import io.github.mzmine.modules.MZmineProcessingModule;
import io.github.mzmine.parameters.ParameterSet;
import io.github.mzmine.parameters.parametertypes.selectors.RawDataFilesSelection;
import io.github.mzmine.parameters.parametertypes.selectors.RawDataFilesSelectionType;
import io.github.mzmine.project.impl.MZmineProjectImpl;
import io.github.mzmine.taskcontrol.Task;
import io.github.mzmine.util.ExitCode;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public class RawDataFileRenameModule implements MZmineProcessingModule {

  /**
   * Renames a raw data file.
   *
   * @param file The file to rename.
   * @param name The proposed name. A unique name is generated by {@link MZmineProjectImpl#getUniqueName(String,
   *             List)}
   */
  public static void renameFile(RawDataFile file, String name) {
    renameFile(file, name, true);
  }

  /**
   * Renames a raw data file
   *
   * @param file                 The file to rename.
   * @param name                 The proposed name. A unique name is generated by {@link
   *                             MZmineProjectImpl#getUniqueName(String, List)}
   * @param fileAlreadyInProject Specifies if the file is already in the project (e.g. project
   *                             import)
   */
  public static void renameFile(RawDataFile file, String name, boolean fileAlreadyInProject) {
    ParameterSet moduleParameters = MZmineCore.getConfiguration()
        .getModuleParameters(RawDataFileRenameModule.class).cloneParameterSet();

    final MZmineProject project = MZmineCore.getProjectManager().getCurrentProject();

    if (project != null) {
        final List<String> names = new ArrayList<>(
            project.getCurrentRawDataFiles().stream().map(RawDataFile::getName).toList());
        if (fileAlreadyInProject) {
          names.remove(file.getName());
        }
        name = names.contains(name) ? MZmineProjectImpl.getUniqueName(name, names) : name;
    }

    RawDataFilesSelection selection = new RawDataFilesSelection();
    selection.setSelectionType(RawDataFilesSelectionType.SPECIFIC_FILES);
    selection.setSpecificFiles(new RawDataFile[]{file});
    moduleParameters.getParameter(RawDataFileRenameParameters.files).setValue(selection);
    moduleParameters.setParameter(RawDataFileRenameParameters.newName, name);

    MZmineCore.runMZmineModule(RawDataFileRenameModule.class, moduleParameters);
  }

  @Override
  public @NotNull String getName() {
    return "Raw data file rename";
  }

  @Override
  public @Nullable Class<? extends ParameterSet> getParameterSetClass() {
    return RawDataFileRenameParameters.class;
  }

  @Override
  public @NotNull String getDescription() {
    return "Renames raw data files.";
  }

  @Override
  public @NotNull ExitCode runModule(@NotNull MZmineProject project,
      @NotNull ParameterSet parameters, @NotNull Collection<Task> tasks,
      @NotNull Instant moduleCallDate) {

    tasks.add(new RawDataFileRenameTask(null, moduleCallDate, parameters));
    return ExitCode.OK;
  }

  @Override
  public @NotNull MZmineModuleCategory getModuleCategory() {
    return MZmineModuleCategory.TOOLS;
  }
}
